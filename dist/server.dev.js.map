{"version":3,"sources":["server.js"],"names":["express","require","cors","dotenv","bodyParser","app","corsOptions","origin","config","use","json","limit","urlencoded","extended","db","mongoose","connect","url","useNewUrlParser","useUnifiedTopology","then","console","log","err","process","exit","get","req","res","message","PORT","env","listen"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMG,UAAU,GAAGH,OAAO,CAAC,aAAD,CAA1B;;AACA,IAAMI,GAAG,GAAGL,OAAO,EAAnB;;AAEAC,OAAO,CAAC,oBAAD,CAAP,C,CACA;;;AAIA,IAAIK,WAAW,GAAG;AAChBC,EAAAA,MAAM,EAAE;AADQ,CAAlB;AAIAJ,MAAM,CAACK,MAAP;AACAH,GAAG,CAACI,GAAJ,CAAQP,IAAI,CAACI,WAAD,CAAZ;AACAD,GAAG,CAACI,GAAJ,CAAQL,UAAU,CAACM,IAAX,CAAgB;AAACC,EAAAA,KAAK,EAAE;AAAR,CAAhB,CAAR;AACAN,GAAG,CAACI,GAAJ,CAAQL,UAAU,CAACQ,UAAX,CAAsB;AAACD,EAAAA,KAAK,EAAE,MAAR;AAAgBE,EAAAA,QAAQ,EAAE;AAA1B,CAAtB,CAAR,E,CACA;;AACAR,GAAG,CAACI,GAAJ,CAAQT,OAAO,CAACU,IAAR,EAAR,E,CACA;AACA;;AACAL,GAAG,CAACI,GAAJ,CAAQT,OAAO,CAACY,UAAR,CAAmB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAnB,CAAR;;AAEA,IAAMC,EAAE,GAAGb,OAAO,CAAC,cAAD,CAAlB;;AACAa,EAAE,CAACC,QAAH,CACGC,OADH,CACWF,EAAE,CAACG,GADd,EACmB;AACfC,EAAAA,eAAe,EAAE,IADF;AAEfC,EAAAA,kBAAkB,EAAE;AAFL,CADnB,EAKGC,IALH,CAKQ,YAAM;AACVC,EAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACD,CAPH,WAQS,UAAAC,GAAG,EAAI;AACZF,EAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CC,GAA/C;AACAC,EAAAA,OAAO,CAACC,IAAR;AACD,CAXH,E,CAeA;;AACApB,GAAG,CAACqB,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzBA,EAAAA,GAAG,CAAClB,IAAJ,CAAS;AAAEmB,IAAAA,OAAO,EAAE;AAAX,GAAT;AACD,CAFD;;AAIA5B,OAAO,CAAC,0BAAD,CAAP,CAAoCI,GAApC;;AACAJ,OAAO,CAAC,4BAAD,CAAP,CAAsCI,GAAtC;;AACAJ,OAAO,CAAC,gCAAD,CAAP,CAA0CI,GAA1C;;AACAJ,OAAO,CAAC,0BAAD,CAAP,CAAoCI,GAApC,E,CAEA;;;AACA,IAAMyB,IAAI,GAAGN,OAAO,CAACO,GAAR,CAAYD,IAAZ,IAAoB,IAAjC;AACAzB,GAAG,CAAC2B,MAAJ,CAAWF,IAAX,EAAiB,YAAM;AACrBT,EAAAA,OAAO,CAACC,GAAR,qCAAyCQ,IAAzC;AACD,CAFD","sourcesContent":["const express = require(\"express\");\nconst cors = require(\"cors\");\nconst dotenv = require(\"dotenv\");\nconst bodyParser = require(\"body-parser\");\nconst app = express();\n\nrequire(\"./app/socketServer\");\n// require(\"./app/walletavatar\")\n\n\n\nvar corsOptions = {\n  origin: \"*\"\n  \n};\ndotenv.config();\napp.use(cors(corsOptions));\napp.use(bodyParser.json({limit: '50mb'}));\napp.use(bodyParser.urlencoded({limit: '50mb', extended: true}));\n// parse requests of content-type - application/json\napp.use(express.json());\n// mongoose.connect(\"mongodb://localhost/phantom-avatars\", { useNewUrlParser: true, useUnifiedTopology: true });\n// parse requests of content-type - application/x-www-form-urlencoded\napp.use(express.urlencoded({ extended: true }));\n\nconst db = require(\"./app/models\");\ndb.mongoose\n  .connect(db.url, {\n    useNewUrlParser: true,\n    useUnifiedTopology: true\n  })\n  .then(() => {\n    console.log(\"Connected to the database!\");\n  })\n  .catch(err => {\n    console.log(\"Cannot connect to the database!\", err);\n    process.exit();\n  });\n\n\n\n// simple route\napp.get(\"/\", (req, res) => {\n  res.json({ message: \"Welcome to bezkoder application.\" });\n});\n\nrequire(\"./app/routes/user.routes\")(app);\nrequire(\"./app/routes/ticket.routes\")(app);\nrequire(\"./app/routes/buyTickets.routes\")(app);\nrequire(\"./app/routes/chat.routes\")(app);\n\n// set port, listen for requests\nconst PORT = process.env.PORT || 3001;\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}.`);\n});\n\n"],"file":"server.dev.js"}