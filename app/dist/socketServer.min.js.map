{"version":3,"sources":["socketServer.js"],"names":["http","require","Server","mongoose","httpServer","createServer","io","cors","origin","methods","db","Chat","chatusers","on","console","log","socket","walletAddress","message","update","logined","ChatUser","updateOne","filter","findOne","existingUser","unreadmsg","length","map","item","reader","_filter","_update","regeneratorRuntime","async","_context2","prev","next","awrap","sent","id","readed","concat","_toConsumableArray","username","stop","find","updateMessage","emit","alert","userData","to","newUser","avatar","avatarUrl","save","_context4","_context6","read","newreader","ObjectId","aggregate","$match","$project","_id","result","index","push","newMessage","ids","userName","updateuser","image","timestamp","Date","then","data","err","user","Types","updateMessages","_context9","PORT","listen"],"mappings":"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","file":"socketServer.min.js","sourcesContent":["const http = require('http');\r\nconst { Server } = require(\"socket.io\");\r\nconst mongoose = require('mongoose');\r\nconst httpServer = http.createServer();\r\nconst io = new Server(httpServer, {\r\n    cors: {\r\n      origin: \"http://localhost:3000\",\r\n      methods: [\"GET\", \"POST\"]\r\n    }\r\n  });\r\n// const db = mongoose.connection;\r\nconst db = require(\"./models\");\r\nconst Chat = db.chats;\r\nconst ChatUser = db.chatusers\r\n\r\nio.on('connection', (socket) => {\r\n  console.log('a user connected');\r\n  //-----------------format-------------------------\r\n  socket.on('format', async(message) => {\r\n    const walletAddress = message.walletAddress;\r\n    console.log('wallet: ', walletAddress);\r\n    const filter = {walletAddress: walletAddress};\r\n    const update = {logined: false};\r\n    const existingUser = await ChatUser.updateOne(filter, update);\r\n  })\r\n\r\n\r\n  //-----------------wallet---------------------------\r\n  socket.on('wallet', async(message) => {\r\n    // console.log('wallet', message.walletAddress);\r\n    const walletAddress = message.walletAddress;\r\n    const existingUser = await ChatUser.findOne({ walletAddress: walletAddress });\r\n    // console.log('user', existingUser)\r\n      if (existingUser) {\r\n        // console.log('abv');\r\n        if(existingUser.unreadmsg.length>0){\r\n          existingUser.unreadmsg.map(async (item, index) => {\r\n            // console.log('item', item);\r\n            const reader = await Chat.findOne({id: item});\r\n            // console.log('red', reader);\r\n            if (reader == null) {\r\n              // console.log('chat is impty');\r\n            }\r\n            else{\r\n              const filter = { id: item };\r\n              const update = { readed: [...reader.readed, existingUser.username] };\r\n              // const update = { readed: [...reader.readed, existing.username] };\r\n              const result = await Chat.updateOne(filter, update);\r\n              const newreader = await Chat.findOne({id: item})\r\n              // console.log('update',newreader);\r\n              // io.emit('message', newreader);\r\n            }\r\n            // io.to(reader).emit('message-read', messageList)\r\n          })\r\n        const filter = { username: existingUser.username };\r\n        const update = { unreadmsg: [] };\r\n        const result = await ChatUser.updateOne(filter, update);\r\n        const updateuser = await ChatUser.findOne({username: existingUser.username})\r\n        const updateMessage = await Chat.find({});\r\n        // console.log('readed', updateuser)\r\n        io.emit('checked', updateMessage);\r\n        // console.log('all:', updateMessage);\r\n        io.emit('Alert', {walletAddress: existingUser.walletAddress, alert: 0});\r\n      }\r\n    }\r\n  })\r\n  //-----------------login-------------------------\r\n  socket.on('login', async(userData) => {\r\n    console.log(userData);\r\n    const existingUser = await ChatUser.findOne({ username: userData.username });\r\n    console.log('existingUser:', existingUser);\r\n    if (existingUser) {\r\n      const message= 'user is already existed.'\r\n      io.to(socket.id).emit('userexist', message);\r\n    }\r\n    else {\r\n      const newUser = new ChatUser({ \r\n        id: socket.id,\r\n        username: userData.username, \r\n        walletAddress: userData.walletAddress, \r\n        avatar: userData.avatarUrl,\r\n        logined: true, \r\n        unreadmsg: [] \r\n      });\r\n      newUser.save();\r\n      io.to(socket.id).emit('login', newUser);\r\n      const updateMessages = await Chat.find({});\r\n      updateMessages.map(async (item) => {\r\n        \r\n        const filter = { id: item.id };\r\n        const update = { readed: [newUser.username] };\r\n        // const update = { readed: [...reader.readed, existing.username] };\r\n        const result = await Chat.updateOne(filter, update);\r\n      })\r\n      const updateMessage = await Chat.find({});\r\n      console.log('readed', updateMessage)\r\n      io.emit('checked', updateMessage);\r\n    }\r\n  })\r\n\r\n  // socket.on('getmessage', (messageData) => {\r\n  //   const\r\n  // })\r\n//----------------logout--------------------\r\n  socket.on('logout', async (message) => {\r\n    const filter = {username: message.username}\r\n    const update = {logined: message.logined}\r\n    const updateUser = await ChatUser.updateOne(filter, update);\r\n    // console.log('us', updateUser);\r\n  });\r\n//-----------------message------------------\r\n  socket.on('message', async (message) => {\r\n    \r\n    // let messageData;\r\n\r\n    // if (message.message instanceof FormData) {\r\n    //   // Handle FormData message\r\n    //   const file = message.get('file');\r\n    //   const fileUrl = await uploadFileToStorage(file);\r\n    //   messageData = { fileUrl };\r\n    // } else {\r\n    //   // Handle string message\r\n    //   messageData = { text: message };\r\n    // }\r\n\r\n    // await Message.create(messageData);\r\n    // console.log('New message:', message);\r\n    const read = [];\r\n    const ids = mongoose.Types.ObjectId();\r\n    ChatUser.aggregate([\r\n      { \r\n        $match: { logined: true } \r\n      },\r\n      {\r\n        $project: { \r\n          _id: 0, \r\n          username: 1,\r\n          avatar: 1\r\n        }\r\n      }\r\n    ], function (err, result) {\r\n      if (err) {\r\n        // Handle error\r\n      } else {\r\n        // console.log(result);\r\n        // Process the result\r\n        result.map((item, index)=> {\r\n          // console.log(message.username);\r\n          if(item.username != message.username) read.push(item.username)\r\n        })\r\n        console.log(message.username, message.message);\r\n        const newMessage = new Chat({\r\n          id: ids,\r\n          userName: message.username,\r\n          avatar: message.avatar,\r\n          message: message.message,\r\n          image: message.image,\r\n          timestamp: new Date(), // Save the current server time to the database\r\n          readed: read\r\n        });\r\n        newMessage.save().then((data) => {\r\n          console.log('Successfully Created!');\r\n        });\r\n        \r\n        // const messages = Chat.find({});\r\n        io.emit('message', newMessage);\r\n      }\r\n    });\r\n    ChatUser.aggregate([\r\n      { \r\n        $match: { logined: false } \r\n      },\r\n      {\r\n        $project: { \r\n          _id: 0, \r\n          username: 1,\r\n          unreadmsg: 2\r\n        }\r\n      }\r\n    ], function (err, result) {\r\n      if (err) {\r\n        // Handle error\r\n      } else {\r\n        // console.log(result);\r\n        // Process the result\r\n        result.map(async(item, index)=> {\r\n        // console.log(message.username);        \r\n          const filter = { username: item.username };\r\n          const update = { unreadmsg: [...item.unreadmsg, ids ] };\r\n          const users = await ChatUser.updateOne(filter, update);\r\n          // const updateUser = ChatUser.updateOne({ username: item.username }, { $push: { unreadmsg: message._id } })\r\n          const user = await ChatUser.findOne({username: item.username});\r\n          io.emit('Alert', {walletAddress: user.walletAddress, alert: user.unreadmsg.length});\r\n        \r\n        console.log('up', user);\r\n      })\r\n      // // console.log(read);\r\n      // const newMessage = new Chat({\r\n      //   userName: message.username,\r\n      //   message: message.message,\r\n      //   timestamp: new Date(), // Save the current server time to the database\r\n      //   readed: read\r\n      // });\r\n      // newMessage.save();\r\n      // // const messages = Chat.find({});\r\n      // io.emit('message', newMessage);\r\n      }\r\n    });\r\n    // console.log('message: ', message);\r\n    \r\n  });\r\n  \r\n  socket.on('upload', (message) => {\r\n    const read = [];\r\n    const ids = mongoose.Types.ObjectId();\r\n    ChatUser.aggregate([\r\n      { \r\n        $match: { logined: true } \r\n      },\r\n      {\r\n        $project: { \r\n          _id: 0, \r\n          username: 1,\r\n          avatar: 2\r\n        }\r\n      }\r\n    ], function (err, result) {\r\n      if (err) {\r\n        // Handle error\r\n      } else {\r\n        // console.log(result);\r\n        // Process the result\r\n      result.map((item, index)=> {\r\n        // console.log(message.username);\r\n        if(item.username != message.username) read.push(item.username)\r\n      })\r\n      // console.log(read);\r\n      const newMessage = new Chat({\r\n        id: ids,\r\n        userName: message.username,\r\n        avatar: message.avatar,\r\n        message: message.message,\r\n        timestamp: new Date(), // Save the current server time to the database\r\n        readed: read\r\n      });\r\n      newMessage.save();\r\n      \r\n      // const messages = Chat.find({});\r\n      io.emit('message', newMessage);\r\n      }\r\n    });\r\n    ChatUser.aggregate([\r\n      { \r\n        $match: { logined: false } \r\n      },\r\n      {\r\n        $project: { \r\n          _id: 0, \r\n          username: 1,\r\n          unreadmsg: 2\r\n        }\r\n      }\r\n    ], function (err, result) {\r\n      if (err) {\r\n        // Handle error\r\n      } else {\r\n        // console.log(result);\r\n        // Process the result\r\n        result.map(async(item, index)=> {\r\n        // console.log(message.username);        \r\n          const filter = { username: item.username };\r\n          const update = { unreadmsg: [...item.unreadmsg, ids ] };\r\n          const users = await ChatUser.updateOne(filter, update);\r\n          // const updateUser = ChatUser.updateOne({ username: item.username }, { $push: { unreadmsg: message._id } })\r\n          const user = await ChatUser.findOne({username: item.username});\r\n          io.emit('Alert', {walletAddress: user.walletAddress, alert: user.unreadmsg.length});\r\n        \r\n        console.log('up', user);\r\n      })\r\n      // // console.log(read);\r\n      // const newMessage = new Chat({\r\n      //   userName: message.username,\r\n      //   message: message.message,\r\n      //   timestamp: new Date(), // Save the current server time to the database\r\n      //   readed: read\r\n      // });\r\n      // newMessage.save();\r\n      // // const messages = Chat.find({});\r\n      // io.emit('message', newMessage);\r\n      }\r\n    });\r\n  })\r\n\r\n  socket.on('disconnect', () => {\r\n    console.log('Client disconnected');\r\n  });\r\n});\r\n\r\nconst PORT = 8080;\r\nhttpServer.listen(PORT, () => {\r\n  console.log(`Socket.IO server is running on port ${PORT}`);\r\n});"]}