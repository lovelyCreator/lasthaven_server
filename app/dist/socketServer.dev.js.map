{"version":3,"sources":["socketServer.js"],"names":["http","require","Server","mongoose","httpServer","createServer","io","cors","origin","methods","db","Chat","chats","ChatUser","chatusers","on","socket","console","log","message","walletAddress","filter","update","logined","updateOne","existingUser","findOne","unreadmsg","length","map","item","index","id","reader","readed","username","result","newreader","updateuser","find","updateMessage","emit","alert","userData","to","newUser","avatar","avatarUrl","save","updateMessages","updateUser","read","ids","Types","ObjectId","aggregate","$match","$project","_id","err","push","newMessage","userName","image","timestamp","Date","then","data","users","user","PORT","listen"],"mappings":"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","sourcesContent":["const http = require('http');\r\nconst { Server } = require(\"socket.io\");\r\nconst mongoose = require('mongoose');\r\nconst httpServer = http.createServer();\r\nconst io = new Server(httpServer, {\r\n    cors: {\r\n      origin: \"http://localhost:3000\",\r\n      methods: [\"GET\", \"POST\"]\r\n    }\r\n  });\r\n// const db = mongoose.connection;\r\nconst db = require(\"./models\");\r\nconst Chat = db.chats;\r\nconst ChatUser = db.chatusers\r\n\r\nio.on('connection', (socket) => {\r\n  console.log('a user connected');\r\n  //-----------------format-------------------------\r\n  socket.on('format', async(message) => {\r\n    const walletAddress = message.walletAddress;\r\n    console.log('wallet: ', walletAddress);\r\n    const filter = {walletAddress: walletAddress};\r\n    const update = {logined: false};\r\n    const existingUser = await ChatUser.updateOne(filter, update);\r\n  })\r\n\r\n\r\n  //-----------------wallet---------------------------\r\n  socket.on('wallet', async(message) => {\r\n    // console.log('wallet', message.walletAddress);\r\n    const walletAddress = message.walletAddress;\r\n    const existingUser = await ChatUser.findOne({ walletAddress: walletAddress });\r\n    // console.log('user', existingUser)\r\n      if (existingUser) {\r\n        // console.log('abv');\r\n        if(existingUser.unreadmsg.length>0){\r\n          existingUser.unreadmsg.map(async (item, index) => {\r\n            // console.log('item', item);\r\n            const reader = await Chat.findOne({id: item});\r\n            // console.log('red', reader);\r\n            if (reader == null) {\r\n              // console.log('chat is impty');\r\n            }\r\n            else{\r\n              const filter = { id: item };\r\n              const update = { readed: [...reader.readed, existingUser.username] };\r\n              // const update = { readed: [...reader.readed, existing.username] };\r\n              const result = await Chat.updateOne(filter, update);\r\n              const newreader = await Chat.findOne({id: item})\r\n              // console.log('update',newreader);\r\n              // io.emit('message', newreader);\r\n            }\r\n            // io.to(reader).emit('message-read', messageList)\r\n          })\r\n        const filter = { username: existingUser.username };\r\n        const update = { unreadmsg: [] };\r\n        const result = await ChatUser.updateOne(filter, update);\r\n        const updateuser = await ChatUser.findOne({username: existingUser.username})\r\n        const updateMessage = await Chat.find({});\r\n        // console.log('readed', updateuser)\r\n        io.emit('checked', updateMessage);\r\n        // console.log('all:', updateMessage);\r\n        io.emit('Alert', {walletAddress: existingUser.walletAddress, alert: 0});\r\n      }\r\n    }\r\n  })\r\n  //-----------------login-------------------------\r\n  socket.on('login', async(userData) => {\r\n    console.log(userData);\r\n    const existingUser = await ChatUser.findOne({ username: userData.username });\r\n    console.log('existingUser:', existingUser);\r\n    if (existingUser) {\r\n      const message= 'user is already existed.'\r\n      io.to(socket.id).emit('userexist', message);\r\n    }\r\n    else {\r\n      const newUser = new ChatUser({ \r\n        id: socket.id,\r\n        username: userData.username, \r\n        walletAddress: userData.walletAddress, \r\n        avatar: userData.avatarUrl,\r\n        logined: true, \r\n        unreadmsg: [] \r\n      });\r\n      newUser.save();\r\n      io.to(socket.id).emit('login', newUser);\r\n      const updateMessages = await Chat.find({});\r\n      updateMessages.map(async (item) => {\r\n        \r\n        const filter = { id: item.id };\r\n        const update = { readed: [newUser.username] };\r\n        // const update = { readed: [...reader.readed, existing.username] };\r\n        const result = await Chat.updateOne(filter, update);\r\n      })\r\n      const updateMessage = await Chat.find({});\r\n      console.log('readed', updateMessage)\r\n      io.emit('checked', updateMessage);\r\n    }\r\n  })\r\n\r\n  // socket.on('getmessage', (messageData) => {\r\n  //   const\r\n  // })\r\n//----------------logout--------------------\r\n  socket.on('logout', async (message) => {\r\n    const filter = {username: message.username}\r\n    const update = {logined: message.logined}\r\n    const updateUser = await ChatUser.updateOne(filter, update);\r\n    // console.log('us', updateUser);\r\n  });\r\n//-----------------message------------------\r\n  socket.on('message', async (message) => {\r\n    \r\n    // let messageData;\r\n\r\n    // if (message.message instanceof FormData) {\r\n    //   // Handle FormData message\r\n    //   const file = message.get('file');\r\n    //   const fileUrl = await uploadFileToStorage(file);\r\n    //   messageData = { fileUrl };\r\n    // } else {\r\n    //   // Handle string message\r\n    //   messageData = { text: message };\r\n    // }\r\n\r\n    // await Message.create(messageData);\r\n    // console.log('New message:', message);\r\n    const read = [];\r\n    const ids = mongoose.Types.ObjectId();\r\n    ChatUser.aggregate([\r\n      { \r\n        $match: { logined: true } \r\n      },\r\n      {\r\n        $project: { \r\n          _id: 0, \r\n          username: 1,\r\n          avatar: 1\r\n        }\r\n      }\r\n    ], function (err, result) {\r\n      if (err) {\r\n        // Handle error\r\n      } else {\r\n        // console.log(result);\r\n        // Process the result\r\n        result.map((item, index)=> {\r\n          // console.log(message.username);\r\n          if(item.username != message.username) read.push(item.username)\r\n        })\r\n        console.log(message.username, message.message);\r\n        const newMessage = new Chat({\r\n          id: ids,\r\n          userName: message.username,\r\n          avatar: message.avatar,\r\n          message: message.message,\r\n          image: message.image,\r\n          timestamp: new Date(), // Save the current server time to the database\r\n          readed: read\r\n        });\r\n        newMessage.save().then((data) => {\r\n          console.log('Successfully Created!');\r\n        });\r\n        \r\n        // const messages = Chat.find({});\r\n        io.emit('message', newMessage);\r\n      }\r\n    });\r\n    ChatUser.aggregate([\r\n      { \r\n        $match: { logined: false } \r\n      },\r\n      {\r\n        $project: { \r\n          _id: 0, \r\n          username: 1,\r\n          unreadmsg: 2\r\n        }\r\n      }\r\n    ], function (err, result) {\r\n      if (err) {\r\n        // Handle error\r\n      } else {\r\n        // console.log(result);\r\n        // Process the result\r\n        result.map(async(item, index)=> {\r\n        // console.log(message.username);        \r\n          const filter = { username: item.username };\r\n          const update = { unreadmsg: [...item.unreadmsg, ids ] };\r\n          const users = await ChatUser.updateOne(filter, update);\r\n          // const updateUser = ChatUser.updateOne({ username: item.username }, { $push: { unreadmsg: message._id } })\r\n          const user = await ChatUser.findOne({username: item.username});\r\n          io.emit('Alert', {walletAddress: user.walletAddress, alert: user.unreadmsg.length});\r\n        \r\n        console.log('up', user);\r\n      })\r\n      // // console.log(read);\r\n      // const newMessage = new Chat({\r\n      //   userName: message.username,\r\n      //   message: message.message,\r\n      //   timestamp: new Date(), // Save the current server time to the database\r\n      //   readed: read\r\n      // });\r\n      // newMessage.save();\r\n      // // const messages = Chat.find({});\r\n      // io.emit('message', newMessage);\r\n      }\r\n    });\r\n    // console.log('message: ', message);\r\n    \r\n  });\r\n  \r\n  socket.on('upload', (message) => {\r\n    const read = [];\r\n    const ids = mongoose.Types.ObjectId();\r\n    ChatUser.aggregate([\r\n      { \r\n        $match: { logined: true } \r\n      },\r\n      {\r\n        $project: { \r\n          _id: 0, \r\n          username: 1,\r\n          avatar: 2\r\n        }\r\n      }\r\n    ], function (err, result) {\r\n      if (err) {\r\n        // Handle error\r\n      } else {\r\n        // console.log(result);\r\n        // Process the result\r\n      result.map((item, index)=> {\r\n        // console.log(message.username);\r\n        if(item.username != message.username) read.push(item.username)\r\n      })\r\n      // console.log(read);\r\n      const newMessage = new Chat({\r\n        id: ids,\r\n        userName: message.username,\r\n        avatar: message.avatar,\r\n        message: message.message,\r\n        timestamp: new Date(), // Save the current server time to the database\r\n        readed: read\r\n      });\r\n      newMessage.save();\r\n      \r\n      // const messages = Chat.find({});\r\n      io.emit('message', newMessage);\r\n      }\r\n    });\r\n    ChatUser.aggregate([\r\n      { \r\n        $match: { logined: false } \r\n      },\r\n      {\r\n        $project: { \r\n          _id: 0, \r\n          username: 1,\r\n          unreadmsg: 2\r\n        }\r\n      }\r\n    ], function (err, result) {\r\n      if (err) {\r\n        // Handle error\r\n      } else {\r\n        // console.log(result);\r\n        // Process the result\r\n        result.map(async(item, index)=> {\r\n        // console.log(message.username);        \r\n          const filter = { username: item.username };\r\n          const update = { unreadmsg: [...item.unreadmsg, ids ] };\r\n          const users = await ChatUser.updateOne(filter, update);\r\n          // const updateUser = ChatUser.updateOne({ username: item.username }, { $push: { unreadmsg: message._id } })\r\n          const user = await ChatUser.findOne({username: item.username});\r\n          io.emit('Alert', {walletAddress: user.walletAddress, alert: user.unreadmsg.length});\r\n        \r\n        console.log('up', user);\r\n      })\r\n      // // console.log(read);\r\n      // const newMessage = new Chat({\r\n      //   userName: message.username,\r\n      //   message: message.message,\r\n      //   timestamp: new Date(), // Save the current server time to the database\r\n      //   readed: read\r\n      // });\r\n      // newMessage.save();\r\n      // // const messages = Chat.find({});\r\n      // io.emit('message', newMessage);\r\n      }\r\n    });\r\n  })\r\n\r\n  socket.on('disconnect', () => {\r\n    console.log('Client disconnected');\r\n  });\r\n});\r\n\r\nconst PORT = 8080;\r\nhttpServer.listen(PORT, () => {\r\n  console.log(`Socket.IO server is running on port ${PORT}`);\r\n});"],"file":"socketServer.dev.js"}